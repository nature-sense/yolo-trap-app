// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsBluetooth(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsBluetooth(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsBluetooth(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashBluetooth(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashBluetooth(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashBluetooth(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum BluetoothState: Int {
  case offline = 0
  case online = 1
  case notSupported = 2
}

enum ServiceState: Int {
  case started = 0
  case stopped = 1
}

enum ConnectionState: Int {
  case connected = 0
  case connecting = 1
  case disconnected = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct BluetoothStateEvent: Hashable {
  var state: BluetoothState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BluetoothStateEvent? {
    let state = pigeonVar_list[0] as! BluetoothState

    return BluetoothStateEvent(
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      state
    ]
  }
  static func == (lhs: BluetoothStateEvent, rhs: BluetoothStateEvent) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ServiceStateEvent: Hashable {
  var deviceId: String
  var service: String
  var state: ServiceState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ServiceStateEvent? {
    let deviceId = pigeonVar_list[0] as! String
    let service = pigeonVar_list[1] as! String
    let state = pigeonVar_list[2] as! ServiceState

    return ServiceStateEvent(
      deviceId: deviceId,
      service: service,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      service,
      state,
    ]
  }
  static func == (lhs: ServiceStateEvent, rhs: ServiceStateEvent) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ConnectionEvent: Hashable {
  var deviceId: String
  var state: ConnectionState


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ConnectionEvent? {
    let deviceId = pigeonVar_list[0] as! String
    let state = pigeonVar_list[1] as! ConnectionState

    return ConnectionEvent(
      deviceId: deviceId,
      state: state
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      state,
    ]
  }
  static func == (lhs: ConnectionEvent, rhs: ConnectionEvent) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScanEvent: Hashable {
  var deviceName: String
  var deviceId: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScanEvent? {
    let deviceName = pigeonVar_list[0] as! String
    let deviceId = pigeonVar_list[1] as! String

    return ScanEvent(
      deviceName: deviceName,
      deviceId: deviceId
    )
  }
  func toList() -> [Any?] {
    return [
      deviceName,
      deviceId,
    ]
  }
  static func == (lhs: ScanEvent, rhs: ScanEvent) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ServiceDescription: Hashable {
  var uuid: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ServiceDescription? {
    let uuid = pigeonVar_list[0] as! String

    return ServiceDescription(
      uuid: uuid
    )
  }
  func toList() -> [Any?] {
    return [
      uuid
    ]
  }
  static func == (lhs: ServiceDescription, rhs: ServiceDescription) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CharacteristicEvent: Hashable {
  var deviceId: String
  var serviceId: String
  var characteristicId: String
  var data: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> CharacteristicEvent? {
    let deviceId = pigeonVar_list[0] as! String
    let serviceId = pigeonVar_list[1] as! String
    let characteristicId = pigeonVar_list[2] as! String
    let data = pigeonVar_list[3] as! FlutterStandardTypedData

    return CharacteristicEvent(
      deviceId: deviceId,
      serviceId: serviceId,
      characteristicId: characteristicId,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      deviceId,
      serviceId,
      characteristicId,
      data,
    ]
  }
  static func == (lhs: CharacteristicEvent, rhs: CharacteristicEvent) -> Bool {
    return deepEqualsBluetooth(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBluetooth(value: toList(), hasher: &hasher)
  }
}

private class BluetoothPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return BluetoothState(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ServiceState(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ConnectionState(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return BluetoothStateEvent.fromList(self.readValue() as! [Any?])
    case 133:
      return ServiceStateEvent.fromList(self.readValue() as! [Any?])
    case 134:
      return ConnectionEvent.fromList(self.readValue() as! [Any?])
    case 135:
      return ScanEvent.fromList(self.readValue() as! [Any?])
    case 136:
      return ServiceDescription.fromList(self.readValue() as! [Any?])
    case 137:
      return CharacteristicEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class BluetoothPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BluetoothState {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ServiceState {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? ConnectionState {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? BluetoothStateEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ServiceStateEvent {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ConnectionEvent {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? ScanEvent {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? ServiceDescription {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? CharacteristicEvent {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BluetoothPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BluetoothPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BluetoothPigeonCodecWriter(data: data)
  }
}

class BluetoothPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = BluetoothPigeonCodec(readerWriter: BluetoothPigeonCodecReaderWriter())
}

var bluetoothPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: BluetoothPigeonCodecReaderWriter());

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BluetoothMethodsApi {
  func getBluetoothState() throws -> BluetoothState
  func startScanning(service: String) throws
  func stopScanning() throws
  func connect(deviceId: String, serviceId: String) throws
  func disconnect(deviceId: String) throws
  func readCharacteristic(deviceId: String, service: String, characteristic: String) throws
  func writeCharacteristic(deviceId: String, service: String, characteristic: String, value: FlutterStandardTypedData) throws
  func subscribeCharacteristic(deviceId: String, service: String, characteristic: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BluetoothMethodsApiSetup {
  static var codec: FlutterStandardMessageCodec { BluetoothPigeonCodec.shared }
  /// Sets up an instance of `BluetoothMethodsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BluetoothMethodsApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getBluetoothStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.getBluetoothState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBluetoothStateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getBluetoothState()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getBluetoothStateChannel.setMessageHandler(nil)
    }
    let startScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.startScanning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanningChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceArg = args[0] as! String
        do {
          try api.startScanning(service: serviceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startScanningChannel.setMessageHandler(nil)
    }
    let stopScanningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.stopScanning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanningChannel.setMessageHandler { _, reply in
        do {
          try api.stopScanning()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopScanningChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceIdArg = args[1] as! String
        do {
          try api.connect(deviceId: deviceIdArg, serviceId: serviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        do {
          try api.disconnect(deviceId: deviceIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let readCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.readCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        do {
          try api.readCharacteristic(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      readCharacteristicChannel.setMessageHandler(nil)
    }
    let writeCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.writeCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        let valueArg = args[3] as! FlutterStandardTypedData
        do {
          try api.writeCharacteristic(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      writeCharacteristicChannel.setMessageHandler(nil)
    }
    let subscribeCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.subscribeCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let serviceArg = args[1] as! String
        let characteristicArg = args[2] as! String
        do {
          try api.subscribeCharacteristic(deviceId: deviceIdArg, service: serviceArg, characteristic: characteristicArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeCharacteristicChannel.setMessageHandler(nil)
    }
  }
}

private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class BluetoothStateEventsStreamHandler: PigeonEventChannelWrapper<BluetoothStateEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: BluetoothStateEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.bluetoothStateEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<BluetoothStateEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: bluetoothPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
class ScanEventsStreamHandler: PigeonEventChannelWrapper<ScanEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: ScanEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.scanEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<ScanEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: bluetoothPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
class ConnectionEventsStreamHandler: PigeonEventChannelWrapper<ConnectionEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: ConnectionEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.connectionEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<ConnectionEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: bluetoothPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
class CharacteristicEventsStreamHandler: PigeonEventChannelWrapper<CharacteristicEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: CharacteristicEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.characteristicEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<CharacteristicEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: bluetoothPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
