// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum BluetoothState {
  offline,
  online,
  notSupported,
}

enum ServiceState {
  started,
  stopped,
}

enum ConnectionState {
  connected,
  connecting,
  disconnected,
}

class BluetoothStateEvent {
  BluetoothStateEvent({
    required this.state,
  });

  BluetoothState state;

  List<Object?> _toList() {
    return <Object?>[
      state,
    ];
  }

  Object encode() {
    return _toList();  }

  static BluetoothStateEvent decode(Object result) {
    result as List<Object?>;
    return BluetoothStateEvent(
      state: result[0]! as BluetoothState,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! BluetoothStateEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ServiceStateEvent {
  ServiceStateEvent({
    required this.deviceId,
    required this.service,
    required this.state,
  });

  String deviceId;

  String service;

  ServiceState state;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      service,
      state,
    ];
  }

  Object encode() {
    return _toList();  }

  static ServiceStateEvent decode(Object result) {
    result as List<Object?>;
    return ServiceStateEvent(
      deviceId: result[0]! as String,
      service: result[1]! as String,
      state: result[2]! as ServiceState,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ServiceStateEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ConnectionEvent {
  ConnectionEvent({
    required this.deviceId,
    required this.state,
  });

  String deviceId;

  ConnectionState state;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      state,
    ];
  }

  Object encode() {
    return _toList();  }

  static ConnectionEvent decode(Object result) {
    result as List<Object?>;
    return ConnectionEvent(
      deviceId: result[0]! as String,
      state: result[1]! as ConnectionState,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ConnectionEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ScanEvent {
  ScanEvent({
    required this.deviceName,
    required this.deviceId,
  });

  String deviceName;

  String deviceId;

  List<Object?> _toList() {
    return <Object?>[
      deviceName,
      deviceId,
    ];
  }

  Object encode() {
    return _toList();  }

  static ScanEvent decode(Object result) {
    result as List<Object?>;
    return ScanEvent(
      deviceName: result[0]! as String,
      deviceId: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ScanEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ServiceDescription {
  ServiceDescription({
    required this.uuid,
  });

  String uuid;

  List<Object?> _toList() {
    return <Object?>[
      uuid,
    ];
  }

  Object encode() {
    return _toList();  }

  static ServiceDescription decode(Object result) {
    result as List<Object?>;
    return ServiceDescription(
      uuid: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ServiceDescription || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class CharacteristicEvent {
  CharacteristicEvent({
    required this.deviceId,
    required this.serviceId,
    required this.characteristicId,
    required this.data,
  });

  String deviceId;

  String serviceId;

  String characteristicId;

  Uint8List data;

  List<Object?> _toList() {
    return <Object?>[
      deviceId,
      serviceId,
      characteristicId,
      data,
    ];
  }

  Object encode() {
    return _toList();  }

  static CharacteristicEvent decode(Object result) {
    result as List<Object?>;
    return CharacteristicEvent(
      deviceId: result[0]! as String,
      serviceId: result[1]! as String,
      characteristicId: result[2]! as String,
      data: result[3]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! CharacteristicEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is BluetoothState) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is ServiceState) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is ConnectionState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is BluetoothStateEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is ServiceStateEvent) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is ConnectionEvent) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is ScanEvent) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    }    else if (value is ServiceDescription) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is CharacteristicEvent) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BluetoothState.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ServiceState.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionState.values[value];
      case 132: 
        return BluetoothStateEvent.decode(readValue(buffer)!);
      case 133: 
        return ServiceStateEvent.decode(readValue(buffer)!);
      case 134: 
        return ConnectionEvent.decode(readValue(buffer)!);
      case 135: 
        return ScanEvent.decode(readValue(buffer)!);
      case 136: 
        return ServiceDescription.decode(readValue(buffer)!);
      case 137: 
        return CharacteristicEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

class BluetoothMethodsApi {
  /// Constructor for [BluetoothMethodsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BluetoothMethodsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<BluetoothState> getBluetoothState() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.getBluetoothState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as BluetoothState?)!;
    }
  }

  Future<void> startScanning(String service) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.startScanning$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[service]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopScanning() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.stopScanning$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String deviceId, String serviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.connect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, serviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String deviceId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> readCharacteristic(String deviceId, String service, String characteristic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.readCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> writeCharacteristic(String deviceId, String service, String characteristic, Uint8List value) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.writeCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic, value]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> subscribeCharacteristic(String deviceId, String service, String characteristic) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.BluetoothPlugin.BluetoothMethodsApi.subscribeCharacteristic$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[deviceId, service, characteristic]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

Stream<BluetoothStateEvent> bluetoothStateEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel bluetoothStateEventsChannel =
      EventChannel('dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.bluetoothStateEvents$instanceName', pigeonMethodCodec);
  return bluetoothStateEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as BluetoothStateEvent;
  });
}
    
Stream<ScanEvent> scanEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel scanEventsChannel =
      EventChannel('dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.scanEvents$instanceName', pigeonMethodCodec);
  return scanEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as ScanEvent;
  });
}
    
Stream<ConnectionEvent> connectionEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel connectionEventsChannel =
      EventChannel('dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.connectionEvents$instanceName', pigeonMethodCodec);
  return connectionEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as ConnectionEvent;
  });
}
    
Stream<CharacteristicEvent> characteristicEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel characteristicEventsChannel =
      EventChannel('dev.flutter.pigeon.BluetoothPlugin.BluetoothEventsApi.characteristicEvents$instanceName', pigeonMethodCodec);
  return characteristicEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as CharacteristicEvent;
  });
}
    
